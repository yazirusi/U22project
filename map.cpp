#include "DxLib.h"
#define STAGE 5
#define HEIGHT 19
#define WIDTH 200
#include <time.h>

/***********************************************
 * 変数の宣言
 ***********************************************/
//time_t t = time(NULL);	//時間取得

int g_KeyFlg;  //入力キー情報
int	g_OldKey;  // 前回の入力キー
int	g_NowKey;	// 今回の入力キー

int p_x, p_y,sp_y;  //プレイヤーの座標
int px,py, spy;	//プレイヤー描画の座標
int p[6];	//プレイヤーのイラスト
int pcnt;	//イラストのカウント
//int l_x, l_y; //押されている間の処理

//ジャンプ変数
int jlong;    //押した長さでジャンプ力を変える
int jlength;    //一回SHIFTを離してから入力を受け付ける
int jflag;	//ジャンプフラグ
int hozonY;    //ジャンプした瞬間の座標
int jy;        //ジャンプした瞬間の座標
int tempY;

//notes関数の変数
int nx[10]; //ノーツの座標
int nf[10];//ノーツごとのフラグ
int bcnt;	//ブレンドのカウント
int hf = 0;	//パーフェクト判定

//notesjudge関数の変数
int P[4]; //Pefect判定（イラスト）
int G[2]; //Great判定
int dc;	//表示する時間のカウント

int FrameStartTime;        // ６０ＦＰＳ固定用、時間保存用変数

int	g_GameState = 1;		// ゲームステータス

int clearstage = 0;
int disp_flg = 1;
int g_stage = 0;   //ステージ管理
int map[HEIGHT][WIDTH];
int x, y;
int mx;		//マップの移動
int	g_StageData[STAGE][HEIGHT][WIDTH] = {
{	//0ステージ
	{1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
	{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
	{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
	{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
	{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
	{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
	{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
	{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
	{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
	{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
	{1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
	{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
	{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
	{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
	{1,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
	{1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
	{1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
	{1,2,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
	{1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
		}
};

/***********************************************
 * 関数のプロトタイプ宣言
 ***********************************************/
void GameInit(void);		//ゲーム初期化処理
void GameMain(void);		//ゲームメイン処理
void PlayerMove(void);          //プレイヤー移動
void DrawMap(void);      //マップ描画
void mapcopy(void);				//各ステージの初期値を保存する
void PlayerJamp(void);			//プレイヤーのジャンプ

void notes(void);	//ノーツ描画関数
void notesjudge(void);	//ノーツ判定描画

void TimeDisp(void);	//時間表示

int CheckHitBlock(int x, int y);

int LoadImages();			//画像読み込み
/***********************************************
 * プログラムの開始
 ***********************************************/
int WINAPI WinMain(HINSTANCE hInstance, HINSTANCE hPrevInstance,
	LPSTR lpCmdLine, int nCmdShow) {
	SetMainWindowText("マップ");
	ChangeWindowMode(TRUE);		// ウィンドウモードで起動
	//SetGraphMode(1280, 850, 32);
	SetGraphMode(1280, 850,32,600);

	if (DxLib_Init() == -1) return -1;	// DXライブラリの初期化処理

	SetDrawScreen(DX_SCREEN_BACK);	// 描画先画面を裏にする

	if (LoadImages() == -1)return -1;	//画像読み込み関数を呼び出し

	// ６０ＦＰＳ固定用、時間保存用変数を現在のカウント値にセット
	FrameStartTime = GetNowCount();

	// １/６０秒立つまで待つ
	while (GetNowCount() - FrameStartTime < 1000 / 60) {}

	// 現在のカウント値を保存
	FrameStartTime = GetNowCount();

	// ゲームループ
	while (ProcessMessage() == 0 && g_GameState != 99 && !(g_KeyFlg & PAD_INPUT_START)) {

		// 入力キー取得
		g_OldKey = g_NowKey;
		g_NowKey = GetJoypadInputState(DX_INPUT_KEY_PAD1);
		g_KeyFlg = g_NowKey & ~g_OldKey;

		ClearDrawScreen();		// 画面の初期化
		switch (g_GameState) {
		case 0:
			mapcopy();			//ステージのコピー 
			break;
		case 1:
			GameInit();         //初期化
			break;
		case 2:
			GameMain();			//ゲームメイン処理
			break;
		}

		ScreenFlip();			// 裏画面の内容を表画面に反映

	}

	DxLib_End();	// DXライブラリ使用の終了処理

	return 0;	// ソフトの終了
}
/***********************************************
 * 起動した日にちの表示
 ***********************************************/
void TimeDisp(void) {
	time_t jikan = time(NULL);
	struct tm imanojikan;

	errno_t error;

	error = localtime_s(&imanojikan, &jikan);

	SetFontSize(32);
	DrawFormatString(50, 5, 0xffffff, "起動日　%d年 %d月 %d日", imanojikan.tm_year + 1900, imanojikan.tm_mon + 1, imanojikan.tm_mday );
	DrawFormatString(1000, 5, 0xffffff, "ESC:終了" );
	SetFontSize(16);
}


/***********************************************
 * ゲーム初期処理
 ***********************************************/
void GameInit(void)
{
	if (g_stage == 0) {
		//マップ配列のプレイヤー位置
		p_x = 1;
		p_y = 17;

		//プレイヤーの座標
		px = 40;
		py = 680;
	}

	//ノーツ位置の初期化
	for (int i = 0; i < 10; i++) {
		nx[i] = 200;
	}

	g_GameState = 2;	// ゲームメイン処理へ
	mapcopy();
}
/***********************************************
 * ゲームメイン
 ***********************************************/
void GameMain(void)
{
	DrawMap();
	PlayerMove();
	notesjudge();
	notes();
	TimeDisp();
	/*DrawFormatString(50, 100, 0xffffff, "%d", p_y);
	DrawFormatString(50, 150, 0xffffff, "%d", p_x);*/
	//SetFontSize(30);
	//DrawFormatString(590, 20, 0xffffff, "%d", Time);
	//DrawBox(39 * p_x, 39 * p_y, 39 * p_x + 39, 39 * p_y + 39, 0xffffff, TRUE); //プレイヤーのbox
}
/***********************************
*マップ表示
***********************************/
void DrawMap(void) {

	//マップ表示
	for (int y = 0; y < HEIGHT; y++) {
		for (int x = 0; x < WIDTH; x++) {
			if (g_StageData[0][y][x + mx - 1] == 0 || g_StageData[0][y][x + mx - 1] == 2) {
				DrawBox(40 * (x - 1) - (px - 40), 40 * y, 40 * (x - 1) + 40 - (px - 40), 40 * y + 40, 0x22aa33, TRUE);
			}
			if (g_StageData[0][y][x + mx - 1] == 1) {
				DrawBox(40 * (x - 1) - (px - 40), 40 * y, 40 * (x - 1) + 40 - (px - 40), 40 * y + 40, 0x2222ff, TRUE);
			}
		}
	}
	for (int y = 0; y < HEIGHT; y++) {
		for (int x = 0; x < WIDTH; x++) {
			DrawFormatString(100 + 30 * x, 50 + 30 * y, 0xffffff, "%d", g_StageData[0][y][x]);
		}
	}
	DrawFormatString(50,100, 0xffffff, "%d", px);

	DrawFormatString(50, 130, 0xffffff, "%d", px + 42);
	DrawFormatString(50, 160, 0xffffff, "%d", (p_x + 1) * 40);
	//px + 82 > hx * 40

	DrawBox(40, py-40, 40 + 40, py + 40, 0xffffff, TRUE);
}
/*******************************
*プレイヤーの移動処理
********************************/
void PlayerMove(void) {
	//左移動
	if (CheckHitKey(KEY_INPUT_LEFT) == 1) {
		if (g_StageData[0][p_y][p_x - 1] == 0 || g_StageData[0][p_y][p_x - 1] == 2) {
			if (px >= 0) {
				px -= 2;
			}
			else {
				px = 40;
				g_StageData[0][p_y][p_x] = 0;
				g_StageData[0][p_y][p_x - 1] = 2;
				p_x -= 1;
				mx--;
			}
		}
	}

	//右移動
	if (CheckHitKey(KEY_INPUT_RIGHT) == 1) {
		if (CheckHitBlock(p_x, p_y) != 1) {
			if (g_StageData[0][p_y][p_x] == 0 || g_StageData[0][p_y][p_x] == 2 && px < 40) {
				px += 2;
			}
			else {
				//if (g_StageData[0][p_y][p_x + 1] != 1) {	//移動先に壁があるか
				px = 0;
				g_StageData[0][p_y][p_x + 1] = 2;
				g_StageData[0][p_y][p_x] = 0;
				p_x += 1;
				mx++;
				//}
			}
		}
		else {
		}

		DrawExtendGraph(-5, py - 80, 191, py + 65, p[pcnt++ / 8 % 5 + 1], TRUE);	//プレイヤーの画像（右向き）
	}
	else {
		DrawExtendGraph(-5, py - 80,191,py + 65, p[0], TRUE);	//右向きで立ち止まってるとき
	}


	//ジャンプフラグ（スペースキー）
	if (g_NowKey & PAD_INPUT_10 && jflag == 0) {
		jflag = 1;	//ジャンプフラグ
		hozonY = py;	//ジャンプした瞬間の座標
		spy = py;
		sp_y = p_y;
		py = py - 20;	//ジャンプの加速度
	}
	//ジャンプ処理（放物線）
	if (jflag == 1) {
		//ジャンプの座標の動き
		tempY = py;
		py += (py - hozonY) + 1;
		hozonY = tempY;

		//ジャンプした時のマップ配列の動き
		p_y = (py + (sp_y * 40) -spy) / 40;

		//上昇してるとき
		if (py - hozonY < 0 && p_y != sp_y) {
			g_StageData[0][p_y + 1][p_x] = 0;
			g_StageData[0][p_y][p_x] = 2;
		}
		//下降してるとき
		if (py - hozonY > 0 && p_y != sp_y - 6) {
			g_StageData[0][p_y - 1][p_x] = 0;
			g_StageData[0][p_y][p_x] = 2;
		}
		
		if (g_StageData[0][p_y + 1][p_x] == 1) {
			if (py + 40  >= (p_y + 1) * 40) {
				py = -40 + (p_y + 1) * 40;
				jflag = 0;
			}
		}
	}
}

/***********************************
*プレイヤーとブロックの当たり判定
*引数　x = p_x	y = p_y
***********************************/
int CheckHitBlock(int x, int y) {	
	//プレイヤーの周り１マスの判定
	int hy = y - 2;
	int hx = x - 1;
	//プレイヤーの周り１マスの判定
	for (int y = hy; y < (hy + 4); y++) {
		for (int x = hx; x < (hx + 3); x++) {
			//DrawFormatString(100, 180, 0xffffff, "%d", px + 42);
			DrawFormatString(100 + 30 * x, 180 + 30 * y, 0xffffff, "%d", g_StageData[0][y][x]);
			if (g_StageData[0][y][x] == 1 && x == (hx + 2) && y == (hy + 2)) {
				if ((px + 42) > (x * 40)) {
					return 1;
				}
			}
		}
	}
	return 0;
}

/***************************************
*プレイヤージャンプ
****************************************/
void PlayerJamp(void) {

}
/***************************************
*マップコピー
***************************************/
void mapcopy(void) {
	/*for (int i = 0; i < HEIGHT; i++) {
		for (int j = 0; j < WIDTH; j++) {
			map[i][j] = g_StageData[g_stage][i][j];
		}
	}*/
}
/********************
*ノーツ
********************/
void notes(void) {
	//下の枠
	DrawLine(0, 800, 200, 800, 0xFFFFFF, 4);
	DrawLine(200, 798, 200, 850, 0xFFFFFF, 4);
	DrawLine(1080, 800, 1280, 800, 0xFFFFFF, 4);
	DrawLine(1080, 798, 1080, 850, 0xFFFFFF, 4);

	int maxn = 8;	//表示するノーツ数の数
	int widthn = 55; //ノーツとノーツの間隔(WIDTH/maxn)

	for (int i = 0; i < maxn; i++) {
		if (nf[maxn + 1] == 1 || (nx[0] - 200) >= i * widthn)	//最初だけずらす、後ループ
			nx[i]++;

		if (nx[i] != 640) {	//真ん中に来たら
			SetDrawBlendMode(DX_BLENDMODE_ALPHA, nx[i] - 200);	//透明度
			if (nf[i] == 0 && nx[i] != 200) {
				DrawLine(nx[i], 800, nx[i], 850, 0x99FFFF, 8);
				DrawLine(1280 - nx[i], 800, 1280 - nx[i], 850, 0x99FFFF, 8);
			}
			if (g_NowKey & PAD_INPUT_1 && nx[i] >= 610 && nf[maxn] == 0) {	//Zキーを押したら
				if (nx[i] >= 635)
					hf = 1; //パーフェクト判定
				if (nx[i] >= 615 && nx[i] < 635)
					hf = 2;
				nf[i] = 1;	//フラグ
				nf[maxn] = 1;	//判定用のフラグ
				nx[maxn] = nx[i];	//判定用の変数
			}
		}
		else {
			nf[maxn + 1] = 1;	//ループフラグ
			nx[i] = 200;	//初期位置に戻す
			nf[i] = 0;
		}
		if (nf[i] == 1 || nf[maxn] == 1 && bcnt != 255) {
			bcnt++;	//透明度用カウント
			SetDrawBlendMode(DX_BLENDMODE_ALPHA, 255 - (bcnt));
			DrawLine(nx[maxn], 800, nx[maxn], 850, 0x00FF00, 8);
			DrawLine(1280 - nx[maxn], 800, 1280 - nx[maxn], 850, 0x00FF00, 8);
		}
		else {
			bcnt = 0;
			nf[maxn] = 0;
		}
	}
	SetDrawBlendMode(DX_BLENDMODE_NOBLEND, 0);	//透明度の初期化
}
/********************
*ノーツの判定表示
********************/
void notesjudge(void) {

	if (hf == 1 && (dc++) < 40) {
		DrawGraph(540, 730, P[(dc) / 4 % 4], TRUE);
	}
	if (hf == 2 && hf != 0 && (dc++) < 40) {
		DrawGraph(540, 730, G[(dc) / 4 % 2], TRUE);
	}
	if (dc >= 40) {
		dc = 0;
		hf = 0;
	}
}
/**********************************************
*  画像読み込み
***********************************************/
int LoadImages()
{
	if ((P[0] = LoadGraph("images/Perfect(白色).png")) == -1) return -1;

	if ((P[1] = LoadGraph("images/Perfect(水色).png")) == -1) return -1;

	if ((P[2] = LoadGraph("images/Perfect(赤色).png")) == -1) return -1;

	if ((P[3] = LoadGraph("images/Perfect(黄色).png")) == -1) return -1;

	if ((G[0] = LoadGraph("images/great(白色).png")) == -1) return -1;

	if ((G[1] = LoadGraph("images/great(水色).png")) == -1) return -1;

	if ((p[0] = LoadGraph("images/idle-1.png")) == -1) return -1;

	if ((p[1] = LoadGraph("images/run-1.png")) == -1) return -1;

	if ((p[2] = LoadGraph("images/run-3.png")) == -1) return -1;

	if ((p[3] = LoadGraph("images/run-4.png")) == -1) return -1;

	if ((p[4] = LoadGraph("images/run-5.png")) == -1) return -1;

	if ((p[5] = LoadGraph("images/run-6.png")) == -1) return -1;

	return 0;
}