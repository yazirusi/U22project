#include "DxLib.h"
#include "player.h"
#include "map.h"
#include "images.h"
#include "key.h"
#include"EnemyMove.h"
#include"EnemyAttck.h"
#include "PlayerAttack.h"

//変数の定義
int p_x, p_y, sp_y;  //プレイヤーの座標
int px, py, spy;	//プレイヤー描画の座標
int pcnt;	//イラストのカウント

//ジャンプ変数
int jlong;    //押した長さでジャンプ力を変える
int jlength;    //一回SHIFTを離してから入力を受け付ける
int jflag;	//ジャンプフラグ
int hozonY;    //ジャンプした瞬間の座標
int jy;        //ジャンプした瞬間の座標
int tempY;
int dflag;	//下降フラグ

/*******************************
*プレイヤーの移動処理
********************************/
void PlayerMove() {

	//左移動
	if (CheckHitKey(KEY_INPUT_LEFT) == 1) {
		if (g_StageData[0][p_y][p_x - 1] != 1 && g_StageData[0][p_y - 1][p_x - 1] != 1) {
			if (px > 0) {
				px -= 2;
				Enemy.Move -= 2;//敵キャラの移動に加算するスクロール量
				apex += 2;
			}
			else {
				px = 40;
				g_StageData[0][p_y][p_x] = 0;
				g_StageData[0][p_y][p_x - 1] = 2;
				p_x -= 1;
				mx--;
				//Enemy.MoveD++;//敵キャラの移動に加算するスクロール量
			}
		}
	}

	//右移動
	if (CheckHitKey(KEY_INPUT_RIGHT) == 1) {
		//当たり判定処理
		if (CheckHitBlock() != 1) {
			if (g_StageData[0][p_y][p_x] != 1 && px < 40) {
				px += 2;
				Enemy.Move += 2;//敵キャラの移動に加算するスクロール量
			}
			else {
				//移動先に壁があるか
				if (g_StageData[0][p_y][p_x + 1] != 1 && g_StageData[0][p_y - 1][p_x + 1] != 1) {
					px = 0;
					g_StageData[0][p_y][p_x + 1] = 2;
					g_StageData[0][p_y][p_x] = 0;
					p_x += 1;
					mx++;
					//Enemy.MoveD--;//敵キャラの移動に加算するスクロール量
				}
			}
		}

		//プレイヤーの画像（右向き）
		DrawExtendGraph(-5, py - 80, 191, py + 65, p[pcnt++ / 8 % 5 + 1], TRUE);
	}
	else {
		//右向きで立ち止まってるとき
		DrawExtendGraph(-5, py - 80, 191, py + 65, p[0], TRUE);
	}


	//ジャンプフラグ（スペースキー）頭上にブロックがあったらジャンプできない
	if (g_KeyFlg & PAD_INPUT_10 && jflag == 0 && ((px == 40 && g_StageData[0][p_y - 2][p_x] != 1) || (px < 40 && g_StageData[0][p_y - 2][p_x - 1] != 1))) {
		jflag = 1;	//ジャンプフラグ
		hozonY = py;	//ジャンプした瞬間の座標
		spy = py;		//680
		sp_y = p_y;		//17
		py = py - 20;	//ジャンプの加速度
	}
	//ジャンプ処理（放物線）
	if (jflag == 1) {

		//ジャンプの座標の動き
		tempY = py;
		py += (py - hozonY) + 1;
		hozonY = tempY;

		p_y = py / 40;

		//上昇してるとき
		if (py - hozonY < 0 && p_y != sp_y) {
			//頭上にブロックがあった場合
			if (g_StageData[0][p_y - 1][p_x] == 1 || px < 40 && g_StageData[0][p_y - 1][p_x - 1] == 1) {
				hozonY = py;	//落ちる瞬間の座標
				spy = py;
				sp_y = p_y;
			}

			//ジャンプしながら移動した先のブロック
			if (g_StageData[0][p_y + 1][p_x] != 1)
				g_StageData[0][p_y + 1][p_x] = 0;

			g_StageData[0][p_y][p_x] = 2;
		}

		//下降してるとき
		if (py - hozonY > 0 && p_y != sp_y - 6 || dflag == 1) {
			dflag = 1;
			if (g_StageData[0][p_y - 1][p_x] != 1)
				g_StageData[0][p_y - 1][p_x] = 0;

			if (g_StageData[0][p_y][p_x] != 1)
				g_StageData[0][p_y][p_x] = 2;

			//真下にブロックがあったらジャンプ処理終了
			if (g_StageData[0][p_y + 1][p_x] == 1 || px < 40 && g_StageData[0][p_y + 1][p_x - 1] == 1) {
				if (py + 40 >= (p_y + 1) * 40) {
					py = -40 + (p_y + 1) * 40;
					dflag = 0;
					jflag = 0;
				}
			}
		}
	}

	//自由落下処理
	if (jflag == 0 && (g_StageData[0][p_y + 1][p_x] != 1 && px < 40 && g_StageData[0][p_y + 1][p_x - 1] != 1)) {
		jflag = 1;
		dflag = 1;
		hozonY = py;	//落ちる瞬間の座標
		spy = py;
		sp_y = p_y;
		//py = py - 20;	//ジャンプの加速度
	}
}

/***********************************
*プレイヤーとブロックの当たり判定
*戻り値 1:ブロックに当たる
***********************************/
int CheckHitBlock() {
	//下降してるとき
	if (dflag == 1 && g_StageData[0][p_y + 1][p_x + 1] == 1 && px + 40 == 80) {
		return 1;
	}

	if (g_StageData[0][p_y][p_x + 1] == 1 && px + 40 == 80) {
		return 1;
	}
	return 0;
}